<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Translusion </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://translusion.github.com/index.xml</link>
    
    
    
    <updated>Mon, 05 May 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Learning Web Development with Rails</title>
      <link>http://translusion.github.com/posts/learning-rails</link>
      <pubDate>Mon, 05 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/posts/learning-rails</guid>
      <description>

&lt;p&gt;Here are some of my notes from learning rails. I am following the course &lt;a href=&#34;https://class.coursera.org/webapplications-001&#34;&gt;Web Application Architectures&lt;/a&gt; at &lt;a href=&#34;https://www.coursera.org&#34;&gt;Coursera&lt;/a&gt;. This is seen from perspective of someone used to more desktop applications. I used Ruby as a scripting language for writing small unix tools in the past, but I am not considering myself very up to date.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Setup Project&lt;/h1&gt;

&lt;p&gt;Have rails autogenerate a bunch of files for a project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails new myproject
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seems to be the way to create a new model class with corresponding table in database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails generate scaffold comment post_id:integer body:text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will to a whole bunch of things. A &lt;strong&gt;scaffold&lt;/strong&gt; from what I can understand is a collection of related:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database table&lt;/li&gt;
&lt;li&gt;Model class&lt;/li&gt;
&lt;li&gt;Controller class&lt;/li&gt;
&lt;li&gt;HTML template files representing view&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I will get a table for my comment, a definition of a model class. Actually the model class won&amp;rsquo;t contain anything, but rails creates methods on it at runtime for me to access variables. That is part of &lt;code&gt;ActiveRecord&lt;/code&gt; from what I understand. One can call methods such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a_comment     = Comment.new
all_comments  = Comment.all
first_comment = Comment.first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this will cause SQL statements to be formed fetching the data out from the underlying table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Comment.first
    Comment Load (0.1ms)  
    SELECT  &amp;quot;comments&amp;quot;.* FROM &amp;quot;comments&amp;quot;   
    ORDER BY &amp;quot;comments&amp;quot;.&amp;quot;id&amp;quot; ASC LIMIT 1
    =&amp;gt; #&amp;lt;Comment 
        id: 2, 
        post_id: 1, 
        body: &amp;quot;This is my first comment&amp;quot;, 
        created_at: &amp;quot;2014-05-05 10:15:52&amp;quot;, 
        updated_at: &amp;quot;2014-05-05 10:15:52&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve taken the liberty to format the output for readability. The Controller objects are apparently supposed to be mediators like in Cocoa, but it seems to be used a bit different. They seem to provide the actions the user perform on an object from the user interface. We can use the &lt;code&gt;rake routes&lt;/code&gt; to find out what REST services are provided. Or probably this isn&amp;rsquo;t called REST but is just a bunch of URLs for performing different HTTP actions. But it seems to correspond to what is created in the controllers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake routes
       Prefix Verb   URI Pattern                                 Controller#Action
     comments GET    /comments(.:format)                         comments#index
              POST   /comments(.:format)                         comments#create
  new_comment GET    /comments/new(.:format)                     comments#new
 edit_comment GET    /comments/:id/edit(.:format)                comments#edit
      comment GET    /comments/:id(.:format)                     comments#show
              PATCH  /comments/:id(.:format)                     comments#update
              PUT    /comments/:id(.:format)                     comments#update
              DELETE /comments/:id(.:format)                     comments#destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Inspecting and Debugging&lt;/h1&gt;

&lt;p&gt;You can interact with your whole rails app from the command line. You don&amp;rsquo;t need a browser running just run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can go ahead and call methods such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a_comment     = Comment.new
all_comments  = Comment.all
first_comment = Comment.first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mentioned earlier. I recommend using &lt;code&gt;pry&lt;/code&gt; it is much better than the standard &lt;code&gt;irb&lt;/code&gt; which is a bit antiquated. Install with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install pry pry-doc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can run the rails console with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pry -r ./config/environment.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pry&lt;/code&gt; let you do some neat things like &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt; into classes or objects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cd 42.6
1&amp;gt; round
=&amp;gt; 42
1&amp;gt; exit
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great way to drill down into your objects and inspect them.  &lt;code&gt;pry&lt;/code&gt; wans&amp;rsquo;t covered in the course I just found that online.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Databases and SQL&lt;/h1&gt;

&lt;p&gt;You don&amp;rsquo;t setup the tables in the database yourself directly. Instead rails will generate a &lt;code&gt;schema.rb&lt;/code&gt; file. Looking like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActiveRecord::Schema.define(version: 20140502112529) do

  create_table &amp;quot;comments&amp;quot;, force: true do |t|
    t.integer  &amp;quot;post_id&amp;quot;
    t.text     &amp;quot;body&amp;quot;
    t.datetime &amp;quot;created_at&amp;quot;
    t.datetime &amp;quot;updated_at&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ruby code will generate all the necessary SQL statements to actually create the database.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deterministic Password Generator</title>
      <link>http://translusion.github.com/posts/dulgt-intro</link>
      <pubDate>Sun, 04 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/posts/dulgt-intro</guid>
      <description>

&lt;p&gt;The heartbleed exploit made  me thing of my own way of keeping passwords which relies on 1Password. What was painfull with 1Password was having to regenerate every single password I have over again. That is a lot of work. The second problem because all my passwords are too hard to remember, I am screwed if I ever lose my encrypted database of passwords. So I also make paper copies, but they have to be made secure as well, so they can not be used directly in their paper form.&lt;/p&gt;

&lt;p&gt;So this has left me with desirng a better solution. Deterministic password generators seem attractive, but there is no one program that works exactly how I want it to work. But there are a of neat ideas out there.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Existing Solutions&lt;/h1&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Enigma&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/enigma/id527555438?mt=12&#34;&gt;Enigma&lt;/a&gt; looks pretty cool, but they had horrible customer support and have trouble with basic english. So not the kind of people I want to entrust with generating my passwords. Should I get a problem with their solution I need crystal clear communication. Also any solution should be open source, so you know exactly how the passwords are made and which makes it possible for you to roll your own solution should the company go belly up.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Generator without Single Point of failure&lt;/h3&gt;

&lt;p&gt;John Metta has some interesting &lt;a href=&#34;http://mettadore.com/ruby/secure-password-generator-as-manager-without-single-point-failure/&#34;&gt;ideas&lt;/a&gt; on how to do this, but he doesn&amp;rsquo;t have a product yet that he can vouch for. Anyway I&amp;rsquo;ll keep my eye on his progress.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Pronouncable Passwords&lt;/h3&gt;

&lt;p&gt;I kind of like pronounable passwords because they are far easier to remember. &lt;a href=&#34;http://passkool.sourceforge.net&#34;&gt;PassKool&lt;/a&gt; is a python script which uses this approach. However I have to check how safe this is. Making them pronounable of course reduces the search space for a hacker. &lt;a href=&#34;http://www.iusmentis.com/security/passphrasefaq/&#34;&gt;Passphrase FAQ&lt;/a&gt; might be the place to learn how to do it.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;What I want in a Solution&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Open source&lt;/li&gt;
&lt;li&gt;Based on well established standards which are can be verified to be safe without being a crypto expert.&lt;/li&gt;
&lt;li&gt;Should be very easy to recreate the code for generating the passwords, should the original program get lost.&lt;/li&gt;
&lt;li&gt;On multiple platforms. I want the tool accessible from my phone, desktop, browser and command line.&lt;/li&gt;
&lt;li&gt;Stores a list of sites or places I have made passwords for and settings used, so I don&amp;rsquo;t forget that I actually have a password already for said site. I actually often forget that.&lt;/li&gt;
&lt;li&gt;Should be easy to use. So I should mostly have to write a really easy password.&lt;/li&gt;
&lt;li&gt;Paper backups. Should be easy to print out a piece of paper from the app containing key information. E.g. by using QR codes so it is really easy to restore a backup.&lt;/li&gt;
&lt;li&gt;Should be secure, so that hackers can&amp;rsquo;t easily break my master password once they get hold of one of my passwords.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(6) and (8) are obviously at odds with each other. My approach here would be to rely on certain assumptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An attacker will most likely attack me online.&lt;/li&gt;
&lt;li&gt;He will not break into my house.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So my current idea for a solution relies on the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One simple password whic his what is mostly asked of me.&lt;/li&gt;
&lt;li&gt;A hard to guess completely random component which I can not hope to remember. This will be stored on paper and will remain in memory for a limited amount of time. So occasionally it will need to be brought back using a QR code scanner e.g. Or if no camera is present with manual typing.&lt;/li&gt;
&lt;li&gt;The on paper is encrypted with my simple password so that should somebody accidentally get hold of my paper backup then can&amp;rsquo;t use it unless they know something about hacking.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The security of the individual points can be tweaked. The assumption here is that ultimately nothing is completely secure. It is all about making it really inconveient for the hacker. If you don&amp;rsquo;t have important secrets or are not an important or wealthy person, we can assume that less security is needed, so that people may e.g. chose themselves whether the paper data should be encrypted and e.g. for how long the hard passwords should remain valid in memory. If your security needs are lower you could let the password stay indefintitly in memory. You could even store it permanently on disk.&lt;/p&gt;

&lt;p&gt;There should be a lot of options to make sure the generator works for everyones needs.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Technologies I should probably use&lt;/h2&gt;

&lt;p&gt;I should probably use &lt;a href=&#34;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&#34;&gt;HMAC&lt;/a&gt;(Hash-based message authentication code) because that is designed to hash using a secret key. Normally we hash like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;digest = hash(message, salt)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With HMAC it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;digest = hash(message, salt, secret)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is better than doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;digest = hash(message || secret, salt)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;||&lt;/code&gt; means concatenate. Apparently this is potentially exploitable because you can create the hash without knowing all of the separate parts.&lt;/p&gt;

&lt;p&gt;But I don&amp;rsquo;t think HMAC is specifically design for generating passwords. So using &lt;code&gt;bcrypt&lt;/code&gt; or &lt;code&gt;scrypt&lt;/code&gt; might be better. Potentially I could combine them with HMAC in some way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/crypto/hmac/&#34;&gt;HMAC in standard Go package&lt;/a&gt; Takes as argument a hash function, key and message.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/go/source/browse/scrypt/scrypt.go?repo=crypto&#34;&gt;scrypt for Go&lt;/a&gt; It uses a password, salt, some parameter which specify CPU and memory usage to slow it down. We could perhaps input generated key from scrypt into HMAC&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/go/source/browse/?repo=crypto&#34;&gt;All crypto functions you might need in Go&lt;/a&gt; This contains bcrypt, blowfish, SHA3, PBKDF2 etc.&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;List of existing solutions&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xanthir.com/password/&#34;&gt;xanthir.com&lt;/a&gt; Configure length, allowed characters. Poor security with SHA-1 hash&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plevyak.com/dpg.html&#34;&gt;plevyak.com&lt;/a&gt; Skein-512 based. Looks promising with use of option distinguishing Information&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://supergenpass.com&#34;&gt;SuperGenPass&lt;/a&gt; Made to drop down from bookmarks and work on mobile homescreen. Easy to use but doesn&amp;rsquo;t seem to be based on generally accepted good practice. In source code it looks like MD5 or SHA1 is used with just 10 iterators. That seems like bad choices. Should be far more iterations and with a better hash function such as SHA2 or SHA3 or bcrypt.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.pwdhash.com&#34;&gt;Standford PwdHash&lt;/a&gt; Transparently converts a user password to a domain specific password. Is possibly using MD5 for hashing which is not desirably. Creator also reserves the right to change the tool.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://fuktommy.com/genpasswd/&#34;&gt;Fuktommy genpasswd&lt;/a&gt; A very simple version using SHA-1. Easy to read code. No iterations (no stretching) so poor security.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://passhash.connorhd.co.uk&#34;&gt;PassHash&lt;/a&gt; Very simple. Uses SHA246-HMAC, but likely no iterations.&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Resources&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://crackstation.net/hashing-security.htm&#34;&gt;crackstation&lt;/a&gt; Great info on hashing. E.g. on why you shouldn&amp;rsquo;t invent your own wacky hashing solutions by combining existig ones. Correct use of salt etc.&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cryptography</title>
      <link>http://translusion.github.com/articles/cryptography</link>
      <pubDate>Sun, 04 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/articles/cryptography</guid>
      <description>

&lt;p&gt;There are a lot of sources, tutorial, wiki pages and what not about cryptography, so I will not try to repeat that here. Instead this will be mainly an overview, to help you figure out what is out there. I will also try to explain concepts which I believe are not explained very well elsewhere. The focus will be on cryptography as a user. Understand enough to be able to pick the right tools and approaches.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Symetric Encryption&lt;/h1&gt;

&lt;p&gt;Plain text is encrypted using a method or algorithm called a &lt;em&gt;cipher&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/articles/crypto/cipher.svg&#34; alt=&#34;Cipher&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Typically the method can be used for both encryption and decryption. With the early approaches, the cipher had to be kept secret, because anybody who knew the cipher could decrypt the secret message. So one realized that a &lt;em&gt;secret key&lt;/em&gt; will have to be used, so that if the if the secret methods of information exchange was broken would would only have to replace the key and not the cipher.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/articles/crypto/symetricencryption.svg&#34; alt=&#34;Symetric&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Asymetric Encryption&lt;/h1&gt;

&lt;p&gt;Key distribution becomes a big problem with symetric encryption. To be on the safe side you have to distribute a different key to everyone you communicate with some they can&amp;rsquo;t read each others messages. This becomes a maintenance nightmare.&lt;/p&gt;

&lt;p&gt;It also requires a secure channel to send someone your secret encryption key. Thus &lt;em&gt;public key encryption&lt;/em&gt; or &lt;em&gt;asymetric encryption&lt;/em&gt; was developed. With &lt;em&gt;public key encryptin&lt;/em&gt; we use two keys:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Public key. Which is not secret. It can be shared with anyone. Think of it as a padlock.&lt;/li&gt;
&lt;li&gt;Private key. Should be kept secret and never shared. Think of it as the key to the padlock.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually there is no fundamental difference between a &lt;em&gt;public&lt;/em&gt; and &lt;em&gt;private&lt;/em&gt; key. It is only their usage which determines which one is public and which one is private. One can use both for encryption  and decryption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/articles/crypto/asymetricencryption.svg&#34; alt=&#34;Asymetric&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The image above shows the typical usage. But one could reverse it and use the private key for encryption and the public key for decryption. This is utilized for digital signatures.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Hashes&lt;/h1&gt;

&lt;p&gt;Data is transformed using a &lt;code&gt;hash function&lt;/code&gt; into something we can either call:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A hash&lt;/li&gt;
&lt;li&gt;Digital fingerprint&lt;/li&gt;
&lt;li&gt;Message digest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/images/articles/crypto/hashfunc.svg&#34; alt=&#34;Hashing&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;A hash function is different from a cipher in that it only goes one way. Multiple messages may be turned into the same &lt;code&gt;digital fingerprint&lt;/code&gt;. If we only need to decide whether two messages are equal we can compare just the hashes if there exists a &lt;strong&gt;sufficiently large number&lt;/strong&gt; of hashes so that collision is practically impossible.&lt;/p&gt;

&lt;p&gt;E.g. an attacker can&amp;rsquo;t trivially create a bogus message with the same hash as the valid message unless trial and error is performed, which would be impractical if the number of possible hashes is very large.&lt;/p&gt;

&lt;p&gt;Hashes are used with digital signatures to &lt;strong&gt;compress&lt;/strong&gt; a message so we only have small amounts of data to encrypt and decrypt.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Usage of Hash Functions&lt;/h2&gt;

&lt;p&gt;Hash function have a wide variety of applications, which might not be immediatly obvious:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Store passwords safely (e.g. Unix password file)&lt;/li&gt;
&lt;li&gt;Create encryption keys&lt;/li&gt;
&lt;li&gt;Deterministic password generation&lt;/li&gt;
&lt;li&gt;Cheaply check over the network if two files or parts of a file are equal&lt;/li&gt;
&lt;li&gt;Create a fingerprint for a public key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The properties of hashes that make them usefull for all these tasks is that when hashing something you lose information, so it is impossible to recreate the original message from a hash. This is used in a Unix login system to store passwords as hashes. A login is then performed by hashing the users provided password and comparing it to a hashed password in the password file. This way if a hacker is able to get hold of the password file there is no way to decrypt the file and see all the passwords in plaintext. He or she has to find the password through brute force.&lt;/p&gt;

&lt;p&gt;You can use this property to combine simple passwords with other information to create strong passwords. E.g. if you concatinate &amp;ldquo;pass123&amp;rdquo; and &amp;ldquo;amazon&amp;rdquo; as you login password for amazon this will produce a string full of giberish.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Different algorithms for different Usage&lt;/h3&gt;

&lt;p&gt;The desired properties of the hashing function used will vary depending on application. If you want to compare two files on separat locations on a network you want to be able to hash the content of the files &lt;strong&gt;fast&lt;/strong&gt;, before you transmit the hash to compare the files.&lt;/p&gt;

&lt;p&gt;But if you derive a password or a key using a hash you probably want it to be &lt;strong&gt;slow&lt;/strong&gt;, because you want a brute force attack to be time consuming.&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;Digital Signatures&lt;/h1&gt;

&lt;p&gt;The sender sends a message to a receiver in plain text. But the sender attached a &lt;em&gt;digital signature&lt;/em&gt; to the message to prove he/she wrote the message.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Sender&lt;/h3&gt;

&lt;p&gt;To accomplish this, the message is (1) hashed to a digest (hash). The digest is (2) encrypted using the senders &lt;code&gt;private key&lt;/code&gt;. The resulting &lt;em&gt;digital signature&lt;/em&gt; could only have been created by someone knowing the &lt;code&gt;private key&lt;/code&gt;. This signature is attached to the message and sent to the receiver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/articles/crypto/digitalsigning.svg&#34; alt=&#34;Digital Signature&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Receiver&lt;/h3&gt;

&lt;p&gt;The receiver decrypts (3) the signature using the sendes &lt;em&gt;public key&lt;/em&gt;. The resulting digest is compared (4) to the digest the receiver computes by hashing the received message. If they are equal, it is proof that the creator of the message could only have been someone knowing the corresponding &lt;em&gt;private key&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fischertechnik</title>
      <link>http://translusion.github.com/prototyping/fischertechnik</link>
      <pubDate>Sat, 03 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/prototyping/fischertechnik</guid>
      <description>&lt;p&gt;A down side to using &lt;a href=&#34;http://www.fischertechnik.de/en/Home.aspx&#34;&gt;fischertechnik&lt;/a&gt; is that it is far less known than Lego. So there are less resources available online and you can&amp;rsquo;t just walk into any toy store and buy &lt;a href=&#34;http://www.fischertechnik.de/en/Home.aspx&#34;&gt;fischertechnik&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However I personally think &lt;a href=&#34;http://www.fischertechnik.de/en/Home.aspx&#34;&gt;fischertechnik&lt;/a&gt; is the superior prototyping system. It works very similar to standard industrial prototyping systems based on &lt;a href=&#34;http://en.wikipedia.org/wiki/T-slot_nut&#34;&gt;T-slots&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lego is well suited for building the same things that you would build with bricks such as houses and buildings. Lego technik or Mindstorm tries to expand on that by offering pieces which connect in a similar fashion as Meccano by having regularly spaced holes in the bricks.&lt;/p&gt;

&lt;p&gt;A downside to that is that pieces can only be connected at fixed points. &lt;a href=&#34;http://www.fischertechnik.de/en/Home.aspx&#34;&gt;Fischertechnik&lt;/a&gt; pieces on the other hand may be connected at any point. A standard building block can connect to another standard building block at any of the block&amp;rsquo;s six faces. That gives versatility which can not be matched by either Meccano or Lego. &lt;a href=&#34;http://www.fischertechnik.de/en/Home.aspx&#34;&gt;Fischertechnik&lt;/a&gt; well suited for constructing machnines but poorly suited for making things resembling builds. Lego is better suited for this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bitcoin talk</title>
      <link>http://translusion.github.com/articles/bitcoin</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/articles/bitcoin</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Bitcons!&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Economics Simulator</title>
      <link>http://translusion.github.com/projects/econsim</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/projects/econsim</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Economic Simulation&lt;/h2&gt;

&lt;p&gt;The idea is to simulate economy in a similar way to how games do it. My first interest is to study comparative advantage and economics of scale. My hypothesis is that minor differences in efficiency of producing a good will over time get amplified. The economic model is based on the assumption that large factories has a larger production capacity, require less work per item to produce but has a higher fixed cost than smaller factories.
Whatever economy starts producing more of a particular good will eventually invest in larger factories, leading to a stronger comparative advantage in that area and pushing other countries or competitors towards investing in production of other goods. Thus a diversitication happens.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging AVR projects</title>
      <link>http://translusion.github.com/posts/debugavrproject</link>
      <pubDate>Sun, 24 Mar 2013 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/posts/debugavrproject</guid>
      <description>

&lt;p&gt;This is a distilation of my last weeks of experience building an AVR curcuit on a breadboard and prototype board and programming it in assembly. Look at one of my previous post to see how you get up to speed with the assembler, avrdude for transfering programs etc.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Continuity Buzzer&lt;/h3&gt;

&lt;p&gt;When I wanted to check whether to points on my circuit were connected before I turned my multimeter on measuring resistance (power turned off of course). If it measured around 0 ohm I knew I had a connection. Only recently I got a much nicere multimeter and I discovered how much faster you can do this with a continuity buzzer. It works pretty much the same as my old approach. I can still see the resistance in ohms. However it also gives off a beep each time resistance is zero. I didn&amp;rsquo;t realize how usefull that was until I started checking my circuits for problems. You can just move your test probes along quickly without every moving your eyes away from the circuit and just listen for the buzz. I was surprised by how much faster I could check lots of lines on my circuit.&lt;/p&gt;

&lt;p&gt;On my prototype board were I just built a development board for 8 pin AVR microcontrollers (see previous post) I was often not sure if my soldering was good or if I had connected everything correctly. The board was a mess of cables so it was easy to forget connections which I did. With the continuity buzzer my approach was to first place one test probe on ground and then move the second one along every point of the circuit which is supposed to be connected to ground and listen for a beep. Then I repeat the same procedure for Vcc.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Printf type debugging on a Microcontroller&lt;/h3&gt;

&lt;p&gt;When developing software I would use one of my LEDs for debugging. So e.g. if I wrote a program where you could adjust the frequency of the blinking of the green LED, then I would use the yellow LED for debugging. I would write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sbi PINB, PB1 ;flip yellow LED
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To flip the LED from on to off or off to on. Writing 1 to the input register, as opposed to the output register does that. I would move this line around in the program to make sure that I hit the appropriate section of code when I expected. A limiting factor is that you can not keep this line in a lot of places, because you can not distinguish between them. This is not as problematic as it sounds, since the programs you write on a ATtiny13 in assembly will probably be quit small. If you write larger programs I recommend using the Arudino instead or investing in a proper development board from ATMEL. I did all my development using TextMate 2.0 with an AVR assembly bundle. I then had a hotkey for building and one for uploading. It worked quite well.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Clock signal mistakes&lt;/h3&gt;

&lt;p&gt;When creating the hardware, by far the mistake which cost me the most time was mixing up CLKI and SCK (pin 2 and 7) on the AVR. I thought I should use CLKI for the clock pin 3 on the ISP6 connector. Then nothing works and you get the same error message from avrdude as you would have gotten if no cable was connected. Actually avrdude gives the same error for almost anything it seems. Other than that most of my mistakes were in software.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Messing up unsigned arithmetic&lt;/h3&gt;

&lt;p&gt;You really ought to get a grasp of unsigned aritmetic. Since you typically work with 8bit values you often have to use unsigned numbers to be able to have numbers in the range 0 to 255 and not just -128 to 127. When branching you should then not use instructions such as:
&lt;ul&gt;
    &lt;li&gt;&lt;span style=&#34;line-height:13px;&#34;&gt;BRLT (&lt;strong&gt;BR&lt;/strong&gt;anch if &lt;strong&gt;L&lt;/strong&gt;ower &lt;strong&gt;T&lt;/strong&gt;han)&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;BRGE (&lt;strong&gt;BR&lt;/strong&gt;anch if &lt;b&gt;G&lt;/b&gt;reater or&lt;b&gt; E&lt;/b&gt;qual)&lt;/li&gt;
    &lt;li&gt;BRMI (&lt;strong&gt;BR&lt;/strong&gt;anch if &lt;b&gt;MI&lt;/b&gt;nus)&lt;/li&gt;
&lt;/ul&gt;
These instructions will typically treat the numbers in the comparisons or arithmetic instructions preceding them as signed numbers with range -128 to 127. The problem with that is that if you write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ldi r16, 128
cpi r16, 127
brge r16Greatest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might expect this code to branch to &lt;em&gt;r16Greatest, &lt;/em&gt;since 128 &amp;gt; 127. But it wont because BRGE is treating the numbers as signed. Then 128 is -128, and -128 &amp;lt; 127, so there will be no branching.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Understanding timers&lt;/h3&gt;

&lt;p&gt;My second big misunderstanding was the timer/counter system. Register TCNT0 counts upwards constantly and you can use it as a sort of timer or to generate PWM signals on the output. One way of using it is to toggle an output pin OC0B (PB1) or OC0A (PB0) whenever I/O register TCNT0 is equal to I/O register OCR0B or OCR0A. You can configure this in one of the timer controll registers. So far so good. The problem arose when using something called CTC mode. When using CTC, the TCNT0 register will be reset to 0 each time TCNT0 equals OCR0A. The last part is the imporant. You can only use OCR0A for this purpose on ATtiny13. When TCNT0 equals OCR0B it will toggle the OC0B pin if you have enabled that but it will never reset TCNT0. There is no way of configuring that.&lt;/p&gt;

&lt;p&gt;The implication of that is also that you can not blink your LEDs at different frequency, but you may blink them out of phase, since OCR0B need not be the same as OCR0A. When I first set this up I did not understand this difference so I wrote a value into OCR0B thinking that would affect the frequency of LED blinking. I did not get any blinking at all. Just a steady light because OCR0A was 0, since it was never set. Thus when TCNT0 got reset it immediatly got the same values as OCR0A again. When turning on interrupts, this had the effect of making the interrupt only fire once.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Development board for 8 pin AVR microcontrollers</title>
      <link>http://translusion.github.com/posts/avrdevboard</link>
      <pubDate>Sun, 24 Mar 2013 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/posts/avrdevboard</guid>
      <description>&lt;p&gt;I got a bunch of ATtiny13 AVR microcontroller chips because I tought it would be fun to see what you can do with a tiny 8 pin microcontroller. The thought first popped into my mind when I looked at a project for creating motor controller for an electric spinning wheel.&lt;/p&gt;

&lt;p&gt;The project used the same chip as in an arduino with an arduino bootloader. The ATmega328 is a lot more expensive than a ATtiny13. You can get a tiny for around 20 Kr at e.g. &lt;a title=&#34;electrokit&#34; href=&#34;http://www.electrokit.com&#34;&gt;electrokit&lt;/a&gt; in sweden.&lt;/p&gt;

&lt;p&gt;Lots of projects such as motor controllers with buttons or a dial for controlling speed does not need anything more than a tiny13, and a small program. My first problem however hooking up the circuit below to program one of my tiny13s, is that it is easy to connect the cables to the programmer wrong.&lt;/p&gt;

&lt;p&gt;&lt;caption id=&#34;&#34; align=&#34;alignnone&#34; width=&#34;650&#34;&gt;&lt;a href=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0648.jpg&#34;&gt;&lt;img id=&#34;i-179&#34; class=&#34; wp-image&#34; title=&#34;ATtiny13 development breadboard&#34; src=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0648.jpg?w=650&#34; alt=&#34;ATtiny13 development breadboard&#34; width=&#34;650&#34; height=&#34;365&#34; /&gt;&lt;/a&gt; Development board for AVR ATtiny13 microcontroller on breadboard, connected to a AVR-ISP500 programmer from Olimex. Pin 2 and 7 are connected to push buttons, which will pull the pins LOW when pushed (will connect to GND). Pin 6 and 5 drive a yellow and green LED through 2 transistors. The two transistors and 22K Ohm resistors are there to avoid interfering with the programmer, since it uses those pins for MISO and MOSI.&lt;/caption&gt;&lt;/p&gt;

&lt;p&gt;The example above is not too bad because I used colored wires with one female and one male end. Thus I could connect the female end directly to the output of the programmer and the male end into the breadboard. But if you have to connect into the connector of a ISP6 cable then it is easy to get the pin numbering wrong.&lt;/p&gt;

&lt;p&gt;So that is why I build the above curcuit first on a breadboard, tested it and then built it on the prototype board below.&lt;/p&gt;

&lt;p&gt;&lt;caption id=&#34;&#34; align=&#34;alignnone&#34; width=&#34;650&#34;&gt;&lt;a href=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0653.jpg&#34;&gt;&lt;img id=&#34;i-216&#34; class=&#34; wp-image&#34; title=&#34;ATtiny13 development board&#34; src=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0653.jpg?w=650&#34; alt=&#34;ATtiny13 development board&#34; width=&#34;650&#34; height=&#34;427&#34; /&gt;&lt;/a&gt; Pin 2 and 7 are connected to push buttons, which will pull the pins LOW when pushed (will connect to GND). Pin 6 and 5 drive a yellow and green LED through two 2N2222 transistors. Potentiometer is connected to pin 3. Red LED indicates that our LM7805 voltage regulator is delivering power. On the bottom right there is a ISP6 connector for in system programming.&lt;/caption&gt;&lt;/p&gt;

&lt;p&gt;It has a ISP6 connector (black 2x3 pins). With this there is only one way to connect the cable from your programmer, so it is very quick to connect your 8 pin AVR microcontroller to a programmer. A lot of devboards contains the bare minimum of components. I wanted to be able to test most of my ideas and programs directly on my development board without having the move the chip to another circuit to do actual work.&lt;/p&gt;

&lt;p&gt;So my development board has the following inputs and outputs which I believe I will typically be using for most projects:
&lt;ul&gt;
    &lt;li&gt;&lt;span style=&#34;line-height: 14px;&#34;&gt;2 outputs connected to a green and yellow LED. These are connect to pins which can do PWM, since I will need that for motor controller programs.&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;2 digital inputs connected to push buttons. Assume pullup resistor is enabled.&lt;/li&gt;
    &lt;li&gt;1 analog input connected to a potentiometer.&lt;/li&gt;
&lt;/ul&gt;
&lt;caption id=&#34;&#34; align=&#34;alignnone&#34; width=&#34;650&#34;&gt;&lt;a href=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/tiny13-programmer_bb.png&#34;&gt;&lt;img id=&#34;i-236&#34; class=&#34; wp-image&#34; title=&#34;Partlist for attiny13 devboard&#34; src=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/tiny13-programmer_bb.png?w=650&#34; alt=&#34;partlist&#34; width=&#34;650&#34; height=&#34;304&#34; /&gt;&lt;/a&gt; 10uF, 100uF capacitor handling 25V. 10K potentiometer. Two 2N2222 transistors. 3 push buttons (one for reset not shown). 3 regular LEDs as shown. 1 switch for power. LM7805 voltage regulator (+5V out). Restors as shown.&lt;/caption&gt;&lt;/p&gt;

&lt;p&gt;If figured I would to projects with blinking LEDs, dimmers or motor controllers. All that will require PWM. Hence pin 6 and 5 were selected for output.&lt;/p&gt;

&lt;p&gt;In the design it is worth nothing that the outputs of the AVR chip do not power the green and yellow LED directly. The reason for that is that pin 6 and 5 are used for in system programming, and are thus connected to our programmer.&lt;/p&gt;

&lt;p&gt;Connecting LEDs directly to these same pins as used by the programmer could interfere with its operation. &lt;a title=&#34;Atmel AVR042: AVR Hardware Design Considerations&#34; href=&#34;http://www.atmel.com/images/doc2521.pdf&#34;&gt;ATMELs datasheets&lt;/a&gt;(page 6) says you should put in a series resistor between the load and the AVR. 10K would be a good value. I put in 22K and a transistor so very little current or voltage drop will happen to drive the LEDs.&lt;/p&gt;

&lt;p&gt;I can program the AVR without any external power because the AVR-ISP500 programmer I use delivers power to the AVR through pin 2 of ISP6 connector. With the transistors I am also able to program it while external power is connected and the circuit is running. This makes development a lot faster, because I do not need to unplug anything to test the circuit, or plug in anythin to transfer an updated version of my program.&lt;/p&gt;

&lt;p&gt;Here is a very simple program I ran on it to make one of the LEDs blink. I will not explain the program here, because it is just something for you to try, to make sure it works.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  .include &amp;quot;tn13def.inc&amp;quot;
  .def a = r16
  .org 0000
   rjmp Reset

Reset:
   ;define output
   sbi DDRB, PB0
   sbi DDRB, PB1
   cbi PORTB, PB0 ;turn off LED
   cbi PORTB, PB1

   ;set prescaler to divide clock freq by 1024. 
   ;each count is about 0.8ms at 1.2MHz
   ldi a, 1&amp;lt;&amp;lt;CS02 | 1&amp;lt;&amp;lt;CS00
   out TCCR0B, a

   ;set blink frequency
   ldi a, 250
   out OCR0A, a
   ldi a, 250
   out OCR0B, a

   ;set CTC mode (clear timer/counter on compare)
   ldi a, 1&amp;lt;&amp;lt;WGM01 | 1&amp;lt;&amp;lt;COM0B0 | 1&amp;lt;&amp;lt;COM0A0 
   out TCCR0A, a 
loop:
   nop
   rjmp loop
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>AVR Assembly programming on Mac OS X</title>
      <link>http://translusion.github.com/posts/avrassembly</link>
      <pubDate>Tue, 05 Mar 2013 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/posts/avrassembly</guid>
      <description>&lt;p&gt;When starting with out programming the &lt;a href=&#34;http://en.wikipedia.org/wiki/Atmel_AVR&#34;&gt;AVR&lt;/a&gt; microcontroller on OS X, you will probably start by using &lt;a href=&#34;http://www.obdev.at/products/crosspack/index.html&#34;&gt;CrossPack&lt;/a&gt;. However the problem with that is it doesn&amp;rsquo;t come with a compiler meant to be used directly by you. It is mainly there for the C compiler. &lt;a href=&#34;http://www.obdev.at/products/crosspack/index.html&#34;&gt;CrossPack&lt;/a&gt; installs the AVR GNU assembler &lt;strong&gt;avr-as&lt;/strong&gt; described &lt;a href=&#34;http://www.nongnu.org/avr-libc/user-manual/assembler.html&#34;&gt;here&lt;/a&gt;. The assembly files typically end with &lt;strong&gt;.S&lt;/strong&gt;. You can invoke it through gcc with e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;avr-gcc -Wall -Os -DF_CPU=8000000 -mmcu=attiny13 -x assembler-with-cpp -c ledflash.S
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will assemble the file &lt;em&gt;ledflash.S &lt;/em&gt;for the AVR microcontroller unit (MCU) ATtiny13. The problem with this assembler is that it does not use the same directives as the the official ATMEL  assembler. Most example code and tutorials you can find online is written according to the ATMEL assembler.&lt;/p&gt;

&lt;p&gt;Fortunatly if you look around you can find the open source &lt;a href=&#34;http://avra.sourceforge.net&#34;&gt;avra&lt;/a&gt; assembler. A problem when first googling is that an older assembler &lt;strong&gt;tavrasm&lt;/strong&gt; will more likely pop up first in your search. Ignore this one. It does not seem to be maintained.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://avra.sourceforge.net&#34;&gt;avra&lt;/a&gt; is newer and is very  easy to compile yourself. There are no dependencies. You just have to give a list of files to gcc or clang to compile it. To check that everything has been assembled correctly you can use the &lt;a title=&#34;vAVRdiasm&#34; href=&#34;https://github.com/vsergeev/vAVRdisasm&#34;&gt;vAVRdiasm&lt;/a&gt; to diassemble the .hex file and see that you get back something that looks like what you put in ;-)&lt;/p&gt;

&lt;p&gt;There is also a TextMate &lt;a title=&#34;avr-assembly bundle&#34; href=&#34;https://github.com/mherb/avr-assembly.tmbundle&#34;&gt;bundle avr-assembly&lt;/a&gt; which you can install which makes it possible to have syntax highlight for your AVR assemble programming.&lt;/p&gt;

&lt;p&gt;As a final note, be aware that you have to fiddle a little bit with all of this software. A lot of stuff did not work exactly as the manual said. It is usually just very minor adjustments to make it work. E.g. the TextMate bundle instructions gave the wrong path to bundles for TextMate2.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with AVR programming</title>
      <link>http://translusion.github.com/posts/avr_without_arduino</link>
      <pubDate>Fri, 01 Mar 2013 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/posts/avr_without_arduino</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;After Arduino&lt;/h2&gt;

&lt;p&gt;So you tried Arduino programming. It is a great way to get introduced to Microcontrollers. But if you are actually an experienced programmer it doesn&amp;rsquo;t quite feel like the real thing. It is sort of like learning BASIC when you know there is this other thing real programmers use which is C.&lt;/p&gt;

&lt;p&gt;Arduino is built around the AVR microcontroller. It simplifies a lot by providing a USB port on the board itself and having a loaded program to load your program into the memory of the AVR microcontroller. If you want to program an AVR chip directly without having all the Arduino infrastructure, then you need a piece of hardware called a programmer and software such as AVRdude.&lt;/p&gt;

&lt;p&gt;The problem getting started with this is that the information related to it is scattered all around the internet. This is my attempt to collect it all in one guide.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;What  software to get&lt;/h3&gt;

&lt;p&gt;First get &lt;a title=&#34;CrossPack&#34; href=&#34;http://www.obdev.at/products/crosspack/index.html&#34;&gt;CrossPack&lt;/a&gt;. It is a collection of tools for programming AVR chips on OS X. The most important part being &lt;a title=&#34;AVRDUDE&#34; href=&#34;http://www.nongnu.org/avrdude/&#34;&gt;AVRDUDE&lt;/a&gt;. The next thing you need to do is bookmark &lt;a title=&#34;Fuse Calc&#34; href=&#34;http://www.engbedded.com/fusecalc&#34;&gt;AVR fuse calculator&lt;/a&gt;. When programming AVR there are something called fuse bits. There are bits which you store in flash memory which affect how the AVR chip will work. It is important to not screw up these settings because if you do it wrong you might not be able to program it again. The fuse bits can be used to set the way the AVR chip should be programmed.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;When developing electronics projects I prefer to have the important data sheets printed out. So I recommend printing out the &lt;a href=&#34;http://www.atmel.com/Images/doc2535.pdf&#34;&gt;ATtiny13 datasheet&lt;/a&gt; found at atmel.com. And if you like me use the &lt;a href=&#34;https://www.olimex.com/Products/AVR/Programmers/AVR-ISP500/&#34;&gt;AVR-ISP500 programmer&lt;/a&gt; from Olimex get its &lt;a href=&#34;https://www.olimex.com/Products/AVR/Programmers/AVR-ISP500/resources/AVR-ISP500.pdf&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now I am not going to repeat all the great information found in all these data sheets and manual, but I will try to fill in the blanks. Connecting all this information to get you to program your AVR chip is not always straight forward.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Setting up the software&lt;/h2&gt;

&lt;p&gt;Follow the&lt;a href=&#34;http://www.obdev.at/products/crosspack/index.html&#34;&gt; tutorial at CrossPack&lt;/a&gt;. You then get a Makefile containing these settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEVICE = atmega8
CLOCK = 8000000
PROGRAMMER = #-c stk500v2 -P avrdoper
OBJECTS = main.o
FUSES = -U hfuse:w:0xd9:m -U lfuse:w:0x24:m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is figuring what these settings should be for your device. You can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;avrdude -c stk500v2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To  get a list over supported AVR chips, or parts as AVRDUDE will refer to them. But really the easiest way to write the DEVICE name is to just write the name of the chip is small letters. So ATtiny13 becomes &lt;em&gt;attiny13. &lt;/em&gt;I actually have a ATtiny13V, but you should not add the V. It is not really a significantly different model.&lt;/p&gt;

&lt;p&gt;The next problem is specifying the programmer. This can be confusing. You do not actually write &lt;em&gt;AVR-ISP500&lt;/em&gt;, even though that is what you have. What matters is the protocol. The &lt;em&gt;AVR-ISP500 &lt;/em&gt;uses the STK500v2 protocol, so that is what matters to AVRDUDE. This is probably because mutliple manufactureres probably make programmers which act the same, but they need to be given unqiue names to distinguish each product.&lt;/p&gt;

&lt;p&gt;Now you might think that you should supply &lt;code&gt;avrdoper&lt;/code&gt; to the &lt;code&gt;-P&lt;/code&gt; argument. But that is for another programmer implementing the STK500v2 protocol. If the programmer acted as a regular USB devices you could just write &lt;code&gt;-P USB&lt;/code&gt;. But AVR-ISP500 uses a serial port over USB. I do not really know what that means. It is sort of like emulating a serial port over USB. So this serial port only exists logically on your Mac not physically. This gives problems when trying to find it on your Mac. You can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /dev/cu.*
/dev/cu.Bluetooth-Modem    /dev/cu.Bluetooth-PDA-Sync
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to get a list of serial devices. Unfortunatly our serial device is not there. That is because it is logical and created on the fly. So you have to actually plug in your &lt;em&gt;AVR-ISP500&lt;/em&gt; into the USB port before it pops up in the list. The name will be different for different computers. On my computer it shows up as &lt;code&gt;/dev/cu.usbmodemfa121&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now the final setting to figure out are the fuses. I got mine from chapter 1, page 28 of the book &lt;a title=&#34;tiny AVR projects&#34; href=&#34;http://www.amazon.com/tinyAVR-Microcontroller-Projects-Evil-Genius/dp/0071744541&#34;&gt;tinyAVR Microcontroller Projects for the Evil Genius&lt;/a&gt;. They set high fuse to 0xFF and low fuse to 0x73. Those bits will mean different things for different AVR chips. To find out what it means go to the &lt;a href=&#34;http://www.engbedded.com/fusecalc&#34;&gt;AVR Fuse Calculator&lt;/a&gt; chose your AVR chip. In my case ATtiny13. Scroll down past all the individual fuse bits and input the high and low fuse bits 0xFF and 0x73. That means we do not enable any of the high bits because, you need to set a bit to 0 to enable it. On the low bits we enable SPIEN, SUT1 and SUT0. The important part is that we enable the SPIEN bit, because that is what allows us to program the AVR chip using a serial interface called SPI. That is what AVR-ISP500 uses. So the important section in my Makefile ended up being changed to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEVICE = attiny13
CLOCK = 8000000
PROGRAMMER = -c stk500v2 -P /dev/cu.usbmodemfa121
OBJECTS = main.o
FUSES = -U lfuse:w:0x73:m -U hfuse:w:0xff:m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we got the software configured. What is left is getting the hardware configured.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Configure the Hardware&lt;/h2&gt;

&lt;p&gt;Before going into details, let me just tell you that hooking up the programmer to your AVR chip is a lot easier than I thought at first. You do not really need to put in any extra components: capacitors, resistors etc. You do not even need to supply a power source. The programmer will give you everything including power through its cable.&lt;/p&gt;

&lt;p&gt;Just put your AVR chip down on the breadboard. Look at your AVR-ISP500 manual and your ATtiny13 datasheet and make sure you connect the 6 pins from your programmer to the right 6 pins on your AVR chip. Here are some tips for each pin:
&lt;ol&gt;
    &lt;li&gt;&lt;span style=&#34;line-height: 14px;&#34;&gt;Serial input (abbriviated MISO) goes from pin 1 on programmer to pin 6 on ATtiny13&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;Target VCC is the same as VCC on your AVR chip. This is how the chip gets power.&lt;/li&gt;
    &lt;li&gt;Serial clock connects to pin 7 on AVR&lt;/li&gt;
    &lt;li&gt;Serial output (MOSI) to pin 5&lt;/li&gt;
    &lt;li&gt;Target reset connects to pin 1 on your ATtiny, which is the reset pin. When it goes LOW it will reset the chip. E.g. starting program over again.&lt;/li&gt;
    &lt;li&gt;Ground (GND). Connect to pin 4, which is GND on the AVR.&lt;/li&gt;
&lt;/ol&gt;
The Olimex AVR-ISP500 manual shows pictures of the connectors to help you identify where the individual pins are. I am using narrow cable with 6 pins on the right side on the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0553.jpg&#34;&gt;&lt;img class=&#34;size-medium wp-image-4 aligncenter&#34; src=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0553.jpg?w=300&#34; alt=&#34;IMG_0553&#34; width=&#34;300&#34; height=&#34;218&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you pull out the cable it is easy to compare with the Olimex manual.&lt;/p&gt;

&lt;p&gt;&lt;caption id=&#34;attachment_5&#34; align=&#34;aligncenter&#34; width=&#34;213&#34;&gt;&lt;a href=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0559.jpg&#34;&gt;&lt;img class=&#34;size-medium wp-image-5&#34; src=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0559.jpg?w=213&#34; alt=&#34;AVR-ISP500 USB based AVR programmer from Olimex, implementing STK500v2 protocol&#34; width=&#34;213&#34; height=&#34;300&#34; /&gt;&lt;/a&gt; AVR-ISP500 USB based AVR programmer from Olimex, implementing STK500v2 protocol&lt;/caption&gt;&lt;/p&gt;

&lt;p&gt;A thing to note about the cable is the pins get turn upside down. So if you turn the programmer so that &lt;strong&gt;pin 1 is at the lower left&lt;/strong&gt; as shown in the manual, it will be the &lt;strong&gt;upper left&lt;/strong&gt; at the end of the cable. In the picture below I have turned the plug so that the the &lt;strong&gt;red&lt;/strong&gt; cable is actually &lt;strong&gt;pin 2&lt;/strong&gt; and the &lt;strong&gt;yellow&lt;/strong&gt; cable below is&lt;strong&gt; pin 1&lt;/strong&gt;. If in doubt measure resistance with your multi meter at both ends, to make sure you are not mixing up which pin is which. If you guessed right, there should be approximatly zero resistance measured.&lt;/p&gt;

&lt;p&gt;&lt;caption id=&#34;attachment_6&#34; align=&#34;aligncenter&#34; width=&#34;300&#34;&gt;&lt;a href=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0549.jpg&#34;&gt;&lt;img class=&#34;size-medium wp-image-6 &#34; src=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0549.jpg?w=300&#34; alt=&#34;IMG_0549&#34; width=&#34;300&#34; height=&#34;231&#34; /&gt;&lt;/a&gt; Yellow: MISO, Red: Vcc, Orange: SCK, Blue: MOSI, Green: Reset, White: GND&lt;/caption&gt;&lt;/p&gt;

&lt;p&gt;Below you can see how I connected all the pins from the programmer to the chip. This is the simple project from chapter 1 of the Evil Genius book. But the important thing here is how the cables are connected from the programmer to the ATtiny13 chip, because that is all you need. You do not need the LEDs, buttons, resitors and capacitor I put in.&lt;/p&gt;

&lt;p&gt;&lt;caption id=&#34;attachment_7&#34; align=&#34;aligncenter&#34; width=&#34;300&#34;&gt;&lt;a href=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0560.jpg&#34;&gt;&lt;img class=&#34; wp-image-7 &#34; src=&#34;http://pluggerogkontakter.files.wordpress.com/2013/03/img_0560.jpg?w=300&#34; alt=&#34;IMG_0560&#34; width=&#34;300&#34; height=&#34;176&#34; /&gt;&lt;/a&gt; Simple setup from Evil Genius book. Allows us to turn on toggle to LEDs with push buttons.&lt;/caption&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prototyping</title>
      <link>http://translusion.github.com/maker/prototyping</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/maker/prototyping</guid>
      <description>

&lt;p&gt;Lets say you want to test out an idea for a robot car, DVD changing robot arm, automatic card sorter or something similar. Machining your own parts would be time consuming. So what are the options for rapid prototyping?&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Lego Mindstorm&lt;/h2&gt;

&lt;p&gt;The best known option and a huge community&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/maker/lego-rover.jpg&#34; alt=&#34;alt text&#34; title=&#34;Lego&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Easy to find help and wide variety of parts. You can get hold of lego mindstorm in almost any toystore. The downside is that lego is its own world. Lego parts don&amp;rsquo;t mesh naturally with regular industrial components. You are typically limited to using parts made specifically for lego.
&lt;hr&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Meccano&lt;/h2&gt;

&lt;p&gt;Readily available and works quite well with non meccano parts from industry&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/maker/meccano-crane.jpg&#34; alt=&#34;alt text&#34; title=&#34;Meccano&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;In Norway you can find Meccano at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.clasohlson.no/Product/StartPageProducts.aspx?kb=kb&#34;&gt;Clas Ohlson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.riktigeleker.no/?page=312&#34;&gt;Riktige Leker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tekniskmuseum.no/nettbutikk&#34;&gt;Teknisk Museum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is slower to put together things with Meccano than with Lego but the benefit is that the same approach for connecting things as &amp;ldquo;real&amp;rdquo; objects: screws and nuts. So you can more easily connect it to standard industrial components.&lt;/p&gt;

&lt;p&gt;It also give a more solid construction, which you could keep as the final version if you want to.
&lt;hr&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;&lt;a href=&#34;/prototyping/fischertechnik&#34;&gt;Fischertechnik&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Plastic parts like lego, but designed mainly for prototyping machines and engineering structures&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/maker/fischertechnik-rover.jpg&#34; alt=&#34;Fischertechnik Rover&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The way pieces are fitted together is very different from  Lego. It is similar to how industrial prototyping systems such as &lt;a href=&#34;http://en.wikipedia.org/wiki/T-slot_nut&#34;&gt;T-slots&lt;/a&gt; works. In fact it can be combined with &lt;a href=&#34;http://openbeamusa.com/index.php&#34;&gt;OpenBeam&lt;/a&gt; aluminium T-slots. This makes the system one of the most flexible ones covered on this page. Unlike Lego and Meccano pieces do not need to be fitted together at fixed points. The main downside &lt;a href=&#34;http://www.fischertechnik.de/en/Home.aspx&#34;&gt;fischertechnik&lt;/a&gt; is that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Largely unknown outside of Germany.&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t buy kits in your average toystore.&lt;/li&gt;
&lt;li&gt;Much smaller community than Lego Mindstorm
&lt;hr&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;MakerBeam&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&#34;http://en.wikipedia.org/wiki/T-slot_nut&#34;&gt;T-slot&lt;/a&gt; system for small hobby sized constructions&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/maker/makerbeam.jpg&#34; alt=&#34;alt text&#34; title=&#34;MakerBeam&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/T-slot_nut&#34;&gt;T-slots&lt;/a&gt; used in the industry is usually 20x20mm, which is impractical for a hobbyist. &lt;a href=&#34;http://www.makerbeam.eu&#34;&gt;MakerBeam&lt;/a&gt; is 10x10mm which is far more practical.&lt;/p&gt;

&lt;p&gt;It is not sold as a toy like Lego, Meccano and Fischertechnik however. Using it requires more knowledge. There are no ready made kits with instructions.&lt;a href=&#34;http://www.makerbeam.eu&#34;&gt;MakerBeams&lt;/a&gt; are really just beams, brackets and screws. There are no ready made kits for building particular models. You have to buy industry standard motors, gears etc to make something usefull.
&lt;hr&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;OpenBeam&lt;/h2&gt;

&lt;p&gt;MakerBeam&amp;rsquo;s bigger brother&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/maker/openbeam.jpg&#34; alt=&#34;alt text&#34; title=&#34;OpenBeam&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;At 15x15mm &lt;a href=&#34;http://openbeamusa.com/index.php&#34;&gt;OpenBeam&lt;/a&gt; is the same size as a standard &lt;a href=&#34;http://www.fischertechnik.de/en/Home.aspx&#34;&gt;fischertechnik&lt;/a&gt; building block. &lt;a href=&#34;http://openbeamusa.com/index.php&#34;&gt;OpenBeam&lt;/a&gt;&amp;rsquo;s main advantage over other forms of &lt;a href=&#34;http://en.wikipedia.org/wiki/T-slot_nut&#34;&gt;T-slots&lt;/a&gt; is that they have been designed to be used with regular nuts and bolts. Other T-slot systems have custom nuts and bolts which are harder to get hold of and more expensive.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>http://translusion.github.com/maker/tools</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/maker/tools</guid>
      <description>

&lt;p&gt;Most of these tools you can get at stores such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.clasohlson.no&#34;&gt;Clas Ohlson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jernia.no&#34;&gt;Jernia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.byggmakker.no&#34;&gt;Byggmaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.maxbo.no&#34;&gt;Maxbo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.clasohlson.no&#34;&gt;Clas Ohlson&lt;/a&gt; might be your first choice because they have a good selection and are usually easily accessible in shopping centers around Norway.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Drilling holes&lt;/h1&gt;

&lt;p&gt;When you drill a hole there are a lot of issues and challenges to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is the hole straight?&lt;/li&gt;
&lt;li&gt;Do you want to put screws into it or rod or axel later?&lt;/li&gt;
&lt;li&gt;What to do when the hole is almost big enough but not quite.&lt;/li&gt;
&lt;li&gt;Are all my holes accurately aligned with each other?&lt;/li&gt;
&lt;li&gt;Are there any differences between making holes in wood or plastic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To answer these questions I&amp;rsquo;d like to show some tools you should be aware of for working with holes.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Deburring Tool&lt;/h3&gt;

&lt;p&gt;Take off sharp edges or enlarge holes&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/maker/tools/deburringtool.jpg&#34; alt=&#34;Deburringtool&#34; /&gt;

&lt;img src=&#34;/images/maker/tools/deburringtip.jpeg&#34; alt=&#34;Deburringtip&#34; /&gt;

When you drill a hole you can get a rough edge for the hole or the hold didn&amp;rsquo;t get quite large enough. Do deal with this you can use a deburring tool It can smoothen an edge or enlarge a hole slightly. Usually you buy these in kits because you need a different one depending on &lt;em&gt;material&lt;/em&gt; you want to deburr. I could be refered to as a &lt;em&gt;edge off&lt;/em&gt; tool rather than &lt;em&gt;deburring tool&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Taper Tool&lt;/h3&gt;

&lt;p&gt;Make screw holes or turn a metal rod into a screw&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/maker/tools/tapwrenches.jpg&#34; alt=&#34;Tapwrenches&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;When you drill a hole it will be smooth inside so e.g. a machine screw won&amp;rsquo;t fasten in the hole. You need to cut a thread out of the side of the hole. This is called &amp;ldquo;tapping&amp;rdquo; and you do it by fastening a tap in a tap wrench (shown above):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/maker/tools/taper-pipe-taps-hcs-847.jpg&#34; alt=&#34;Taper Pipe Taps Hcs 847&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You then screw the tap into the hole by hand in similar fashion to how you screw a screw. When you are done, you have to unscrew it carefully avoiding to ruin the thread you just cut. To turn a smooth metal rod into a screw you perform &amp;ldquo;threading&amp;rdquo; on it using a die wrench.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/maker/tools/diewrench.jpg&#34; alt=&#34;Diewrench&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Supplies</title>
      <link>http://translusion.github.com/maker/supplies</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/maker/supplies</guid>
      <description>

&lt;p&gt;Materials are sheets, tubes, bars, extrusions etc made of plastic, metal, wood or rubber.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Where to buy materials&lt;/h2&gt;

&lt;p&gt;Bigger pieces are usually bought at hardware or home improvement stores. Smaller sized materials are can often be gotten in hobby stores catering to model builders or RC cars or airplanes.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Byggmakker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.byggmakker.no&#34;&gt;Byggmakker&lt;/a&gt; is a usefull place to get tools, screws, nuts, bolts and wood. Apart from that not much interesting for makers.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Maxbo&lt;/h3&gt;

&lt;p&gt;I can recommend visiting &lt;a href=&#34;http://www.maxbo.no&#34;&gt;Maxbo&lt;/a&gt;, they have a lot of usefull stuff for builders. Among other things they have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Metal tubes in a number of dimensions and material:

&lt;ul&gt;
&lt;li&gt;Steel&lt;/li&gt;
&lt;li&gt;Aluminium&lt;/li&gt;
&lt;li&gt;Copper&lt;/li&gt;
&lt;li&gt;Brass&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Metal sheets&lt;/li&gt;
&lt;li&gt;Rods in multiple dimensions both in metal and wood&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A number of Maker projects use plastics tubes. The same kind of tubes used in your home for plumbing. E.g you can build a watergun or water and air probelled rockets. Maxbo has a good selections of these tubes as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mechanical Parts</title>
      <link>http://translusion.github.com/maker/mechanical</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>http://translusion.github.com/maker/mechanical</guid>
      <description>

&lt;p&gt;I am not aiming to give an exhaustive guide here. This is mainly to get you started. I will link to more in depth articles. The problem I am trying to address here is that when you start out you end up on a wild goose chase with google to find out stuff. I will focus on mentioning mistakes I&amp;rsquo;ve made which might aid in getting the right parts or using them correctly.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Where to buy mechanical parts&lt;/h1&gt;

&lt;p&gt;A problem when buying mechanical parts is that the stores are usually made for professionals so it can be difficult to determine the right thing to get.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;RS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://no.rs-online.com&#34;&gt;rs&lt;/a&gt; has one of the largest selections of products. That is both a benefit and a problem. You can get electric motors, wires, screws etc lots of places. But if you want to get hold of things such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pulleys&lt;/li&gt;
&lt;li&gt;Actuators&lt;/li&gt;
&lt;li&gt;Gears&lt;/li&gt;
&lt;li&gt;Axel collars&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a whole host of other things then &lt;a href=&#34;http://no.rs-online.com&#34;&gt;rs&lt;/a&gt; is the best choice.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>